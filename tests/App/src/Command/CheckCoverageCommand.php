<?php

declare(strict_types=1);

namespace Acseo\SelectAutocomplete\Tests\App\Command;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Serializer\Serializer;

class CheckCoverageCommand extends Command
{
    private const MINIMUM_COVERAGE_ACCEPTABLE = 0; // TODO - Make tests

    protected static $defaultName = 'check:coverage';

    /**
     * @var Serializer
     */
    private $serializer;

    /**
     * @var string
     */
    private $coverage;

    public function __construct(Serializer $serializer, string $coverage)
    {
        parent::__construct();

        $this->serializer = $serializer;
        $this->coverage = $coverage;
    }

    protected function configure()
    {
        $this->setDescription('Check coverage with xml file generated by php-unit & xdebug');
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $io = new SymfonyStyle($input, $output);

        if (!file_exists($this->coverage)) {
            $io->error('Coverage file is missing');

            return 1;
        }

        // Get coverage file generated by php-unit & xdebug
        $content = file_get_contents($this->coverage);

        try {
            // Transform xml string to php array
            $data = $this->serializer->decode($content, 'xml');
        } catch (\Exception $e) {
            $io->error('Coverage file contains invalid xml');

            return 1;
        }

        // Get root data of coverage (method, function, classes, lines, ...)
        if (!$rootData = $data['project']['directory']['totals'] ?? null) {
            $io->error('Coverage file is invalid');

            return 1;
        }

        $tested = 0;
        $percentTotal = 0;
        foreach ($rootData as $subject => $value) {
            // If no elements can be tested, we don't need to check coverage
            if ('traits' === $subject || 0 === ($value['@count'] ?? $value['@total'] ?? 0)) {
                continue;
            }
            ++$tested;
            // We base our test on percent value
            if (null === ($percent = $value['@percent'] ?? null)) {
                throw new \Exception('Coverage data is invalid');
            }

            // Check if it's satisfying
            if ($percent < self::MINIMUM_COVERAGE_ACCEPTABLE) {
                $io->warning(sprintf(
                    'Coverage of "%s" is too low (%s%%). It has to be > %s%%',
                    $subject,
                    $percent,
                    self::MINIMUM_COVERAGE_ACCEPTABLE
                ));
            }

            $percentTotal += $percent * 100;
        }

        $coverage = round(($percentTotal / $tested) / 100, 2);
        $io->note(sprintf('Total coverage value : %s%%', $coverage));

        // Oh no, we have to do more unit tests...
        if ($coverage < self::MINIMUM_COVERAGE_ACCEPTABLE) {
            $io->error('Please review your unit tests to cover more code');

            return 1;
        }

        // It's ok !
        $io->success('Coverage is satisfying');

        return 0;
    }
}
